<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.working.dao.StudentDAO">
	<resultMap id="BaseResultMap" type="com.working.entity.Student">
		<id column="id" property="id"></id>
		<result column="num" property="num" />
		<result column="password" property="password" />
		<result column="name" property="name" />
		<result column="sex" property="sex" />
		<result column="phone" property="phone" />
		<result column="mail" property="mail" />
		<result column="grade" property="grade" />
	</resultMap>
	
	<sql id="BaseColumnList">
		id as id,
		num as num,
		password as password,
		name as name,
		sex as sex,
		phone as phone,
		mail as mail,
		grade as grade
	</sql>

	<sql id="BaseCustomQueryCondition">
		<if test="id != null">
			and id=#{id}
		</if>	
		<if test="num != null">
			and num=#{num}
		</if>
		<if test="password != null">
			and password=#{password}
		</if>	
		<if test="name != null">
			and name=#{name}
		</if>	
		<if test="sex != null">
			and sex=#{sex}
		</if>	
		<if test="phone != null">
			and phone=#{phone}
		</if>	
		<if test="mail != null">
			and mail=#{mail}
		</if>	
		<if test="grade != null">
			and grade=#{grade}
		</if>	
	</sql>

	<insert id="insert" parameterType="com.working.entity.Student" >
    	insert into student
    		(id, num, password, name, sex, phone, mail, grade) 
    	values
    		(#{id}, #{num},#{password}, #{name}, #{sex}, #{phone}, #{mail}, #{grade})
  	</insert>

  	<insert id="insertList" parameterType="java.util.List" >
    	insert into student
    		(id, num, password, name, sex, phone, mail, grade) 
    	values
    	<foreach collection="list" index="index" item="item" separator=",">
    		(#{item.id}, #{item.num},  #{item.password}, #{item.name}, #{item.sex}, #{item.phone}, #{item.mail}, #{item.grade})
    	</foreach>
  	</insert>

  	<update id="delete" parameterType="java.lang.String">
		delete from student where id = #{id}
    </update>

  	<update id="update" parameterType="com.working.entity.Student">
		update student set
		num=#{num}, password=#{password}, name=#{name}, sex=#{sex}, phone=#{phone}, mail=#{mail}, grade=#{grade}
		where id = #{id}
	</update>
	
	<update id="updateIfNotNull" parameterType="com.working.entity.Student">
		update student set
		<if test="num != null">
			num=#{num}, 
		</if>
		<if test="password != null">
			password=#{password},
		</if>
		<if test="name != null">
			name=#{name}, 
		</if>
		<if test="sex != null">
			sex=#{sex}, 
		</if>
		<if test="phone != null">
			phone=#{phone}, 
		</if>
		<if test="mail != null">
			mail=#{mail}, 
		</if>
		<if test="grade != null">
			grade=#{grade}
		</if>
		where id = #{id}
	</update>

	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
	    select 
	    <include refid="BaseColumnList" />
	    from student
	    where 
			id = #{id}
  	</select>

  	<select id="selectList" resultMap="BaseResultMap" parameterType="com.working.entity.Student">
	    select 
	    <include refid="BaseColumnList" />
	    from student
	    where 1=1
	    <include refid="BaseCustomQueryCondition" />
  	</select>

	<select id="queryStudents" parameterType="java.util.Map" resultType="com.working.entity.Student">
		SELECT
			S.id,
			S.`name`,
			S.grade,
			S.num,
			S.sex,
			S.phone,
			S.mail
		FROM
			class C,
			student S
		<where>
			S.grade = C.class_num
			AND C.teacher_num = #{teacherNum}
			<if test='classNum !=null and classNum !="" '>
				AND C.class_num = #{classNum}
			</if>
		</where>
	</select>
	
</mapper>